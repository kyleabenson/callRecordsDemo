# from google.cloud import bigquery

# # Construct a BigQuery client object.
# client = bigquery.Client()

# # TODO(developer): Set table_id to the ID of table to append to.
# table_id = "ops-demo-330920.billableCalls.calls"

# # TODO(developer): Get this data generated by goFakeIt
# rows_to_insert = [
#     {"full_name": "Phred Phlyntstone", "phone_number":"1-800-555-555", "call_type": "inbound"},
#     {"full_name": "Wylma Phlyntstone", "phone_number":"1-800-555-555", "call_type": "outbound"},
# ]

# errors = client.insert_rows_json(table_id, rows_to_insert)  # Make an API request.
# if errors == []:
#     print("New rows have been added.")
# else:
#     print("Encountered errors while inserting rows: {}".format(errors))


from concurrent import futures
import logging

import grpc
import calls_pb2
import calls_pb2_grpc


class recorder(calls_pb2_grpc.recorderServicer):

    def ingestRecord(self, request, context):
        return calls_pb2.ackRecord(message='Hello, %s!' % request.FullName)


def serve():
    port = '50051'
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    calls_pb2_grpc.add_recorderServicer_to_server(recorder(), server)
    server.add_insecure_port('[::]:' + port)
    server.start()
    print("Server started, listening on " + port)
    server.wait_for_termination()


if __name__ == '__main__':
    logging.basicConfig()
    serve()